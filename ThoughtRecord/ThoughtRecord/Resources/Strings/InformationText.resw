<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AboutContent" xml:space="preserve">
    <value>This</value>
  </data>
  <data name="AboutTitle" xml:space="preserve">
    <value>About</value>
  </data>
  <data name="BroughtToYouByText" xml:space="preserve">
    <value>Brought to you by </value>
  </data>
  <data name="ContactMeContent" xml:space="preserve">
    <value>Do you want to be able to save your thought records in a printable format? Would you like to be able to track your progress over time with charts and graphs? If you have any suggestion or ideas on how this app could be improved, let me know.</value>
  </data>
  <data name="ContactMeLinkText" xml:space="preserve">
    <value>Contact Me</value>
  </data>
  <data name="DonateButtonText" xml:space="preserve">
    <value>Donate $1.99 USD</value>
  </data>
  <data name="DonateContent" xml:space="preserve">
    <value>If you found this app helpful, the best thing you can do is spread the word about it. If you would like, you can also make a small donation.</value>
  </data>
  <data name="ImageSourceLinkText" xml:space="preserve">
    <value>View Image Source</value>
  </data>
  <data name="ImageSourceText" xml:space="preserve">
    <value>The background image on the thought record list page was obtained from Pixabay user Unsplash.</value>
  </data>
  <data name="InstructionsTitle" xml:space="preserve">
    <value>Instructions</value>
  </data>
  <data name="OpenCommand1" xml:space="preserve">
    <value>• Open latest thought record with "Thought Record, open latest".</value>
  </data>
  <data name="OpenCommand2" xml:space="preserve">
    <value>• Open blank thought record with "Thought Record, open new".</value>
  </data>
  <data name="OpenCommand3" xml:space="preserve">
    <value>• Open thought record list page with "Thought Record, show me all".</value>
  </data>
  <data name="OpenCommand4" xml:space="preserve">
    <value>• Open information page with "Thought Record, open information".</value>
  </data>
  <data name="OpenCommandsSectionIntro" xml:space="preserve">
    <value>With these commands you can open the app to specific pages with Cortana:</value>
  </data>
  <data name="OpenCommandsSectionTitle" xml:space="preserve">
    <value>LaunchingThe App</value>
  </data>
  <data name="Step1" xml:space="preserve">
    <value>1. Briefly describe the situation that brought on the dysfunctional thinking. What were you doing? What did you say? You want to give some context to the automatic thoughts.</value>
  </data>
  <data name="Step2" xml:space="preserve">
    <value>2. Identify the emotions and feelings you felt during and/or soon after the situation and rate them in terms of intensity. Emotions and feelings are rated on a scale of 0 (no intensity) to 100 (the most intense).</value>
  </data>
  <data name="Step3" xml:space="preserve">
    <value>3. Identify automatic thoughts that came to mind during and/or after the situation, specifically ones that may have contributed to your emotions identified in the previous step. These automatic thoughts often take the form dysfunctional thinking such as negative self-talk (e.g. "I'm not good enough.") or catastrophic thinking (e.g. "I've ruined the whole presentation.").</value>
  </data>
  <data name="Step4" xml:space="preserve">
    <value>4. Identify the evidence both for and against your automatic thoughts. This evidence can be anything from things you have experienced before, advice from your doctor, things people have said, facts that you know to be true, etc. Most of the time, all you need is your common sense.</value>
  </data>
  <data name="Step5" xml:space="preserve">
    <value>5. Re-evaluate your automatic thoughts based on this evidence for and against them and come to a rational assessment. Is the thought unrealistic? Highly improbable? Worth worrying about? Usually, it will become clear that the automatic dysfunctional thoughts have little or no basis in fact.</value>
  </data>
  <data name="Step6" xml:space="preserve">
    <value>6. Re-evaluate the emotions and feelings you identfied in light of the rational assessment of your automatic thoughts. If you are still feeling them, has their intensity changed at all? If the situation happened again, how intense do you think these emotions would be?</value>
  </data>
  <data name="StepsSectionContent" xml:space="preserve">
    <value>When a situation occurs that involves dysfunctional thinking, you should fill out a thought record. This is done by following these steps:</value>
  </data>
  <data name="StepsSectionTitle" xml:space="preserve">
    <value>How To Use a Thought Record</value>
  </data>
  <data name="Tip1" xml:space="preserve">
    <value>• Write a thought record as often as you can. You cannot change your thinking patterns by writing a single thought record. You should continue the practice until it becomes a habit.</value>
  </data>
  <data name="Tip2" xml:space="preserve">
    <value>• Fill out a thought record as soon after a situation as you can. That way, the details will still be fresh in your mind and you may still be experiencing the emotions and thinking the automatic thoughts.</value>
  </data>
  <data name="Tip3" xml:space="preserve">
    <value>• Thought records may seem like a simple tool, but they do take practice. The first time you write one, you may feel like you can't clearly identify your automatic thoughts or that you are unable to think of evidence for or against them. The good news is that with practice, you will become more aware of your thoughts and feelings and better able to evaluate them.</value>
  </data>
  <data name="TipsTitle" xml:space="preserve">
    <value>Tips</value>
  </data>
  <data name="VoiceCommandsIntro" xml:space="preserve">
    <value>This app supports Cortana voice commands and will be adding more over time.</value>
  </data>
  <data name="VoiceCommandsTitle" xml:space="preserve">
    <value>Voice Commands</value>
  </data>
  <data name="WhatIsThoughtRecordSectionContent" xml:space="preserve">
    <value>Thought records are a tool used in cognative behavioral therapy to manage dysfunctional thinking related to conditions such as depression, obsessive-compulsive disorder, and anxiety. Dysfunctional thinking includes things such as negative self-talk and catastrophic thinking. The ultimate goal of using thought records is to change your thinking patterns so as to minimize the impact of such dysfunctional thoughts.</value>
  </data>
  <data name="WhatIsThoughtRecordSectionTitle" xml:space="preserve">
    <value>What is a Thought Record?</value>
  </data>
</root>